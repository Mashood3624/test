{"ast":null,"code":"import _defineProperty from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\n/*eslint-disable */\nimport { Observable } from 'rxjs';\nimport { AllAction } from './../action/index';\nimport appFirebase from '../../utilities/Firebase';\nimport constants from '../../utilities/constants'; // eslint-disable-next-line\n\nvar constant = constants.getConstant();\n\nvar AllActionEpic = function AllActionEpic() {\n  _classCallCheck(this, AllActionEpic);\n};\n\nAllActionEpic.insertCompany = function (action$) {\n  return action$.ofType(AllAction.INSERT_COMPANY).do(function (x) {\n    return x;\n  }).switchMap(function (_ref) {\n    var payload = _ref.payload;\n    console.log(\"PayloadFrom\", payload);\n    var Company = payload;\n    return Observable.fromPromise(appFirebase.firestore().collection(\"companies\").doc(payload.uid).set({\n      CompanyName: Company.CompanyName,\n      AboutCompany: Company.AboutCompany,\n      OwnerName: Company.OwnerName,\n      CompanyLocation: Company.CompanyLocation,\n      NoOFEmployee: Company.NoOFEmployee,\n      RegistrationNo: Company.RegistrationNo,\n      GSTN_No: Company.GSTN_No,\n      Status: \"Pending\",\n      uid: Company.uid,\n      DocumentUrl: Company.DocumentUrl,\n      latitude: 24.9159156,\n      longitude: 67.0573662,\n      rating: {\n        ratings: '0',\n        noOfUsers: '0'\n      },\n      driver: [],\n      category: [],\n      products: []\n    })).map(function (response) {\n      console.log(\"responseFromComapny\", response);\n      return {\n        type: AllAction.INSERT_COMPANY_SUCCESS,\n        payload: \"Inserted Successfully\"\n      };\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.INSERT_COMPANY_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.getCompany = function (action$) {\n  return action$.ofType(AllAction.GET_COMPANY).do(function (x) {\n    return x;\n  }).switchMap(function (_ref2) {\n    var payload = _ref2.payload;\n    console.log(\"PayloadFrom getCompany\", payload);\n    return Observable.fromPromise(appFirebase.firestore().collection(\"companies\").doc(payload).get()).map(function (doc) {\n      console.log(\"docFromComapny getCompany\");\n\n      if (doc.exists) {\n        return {\n          type: AllAction.GET_COMPANY_SUCCESS,\n          payload: [doc.data()]\n        };\n      } else {\n        return {\n          type: AllAction.GET_COMPANY_SUCCESS_FAILURE,\n          payload: \"No Data Found\"\n        };\n      }\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.GET_COMPANY_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.updateCompany = function (action$) {\n  return action$.ofType(AllAction.UPDATE_COMPANY).do(function (x) {\n    return x;\n  }).switchMap(function (_ref3) {\n    var payload = _ref3.payload;\n    console.log(\"PayloadFrom insertCompany\", payload);\n    var Company = payload;\n    return Observable.fromPromise(appFirebase.firestore().collection(\"companies\").doc(payload.uid).update({\n      CompanyName: Company.CompanyName,\n      AboutCompany: Company.AboutCompany,\n      OwnerName: Company.OwnerName,\n      CompanyLocation: Company.CompanyLocation,\n      NoOFEmployee: Company.NoOFEmployee,\n      RegistrationNo: Company.RegistrationNo,\n      GSTN_No: Company.GSTN_No,\n      Status: \"Pending\",\n      uid: Company.uid,\n      DocumentUrl: Company.DocumentUrl,\n      latitude: 24.9159156,\n      longitude: 67.0573662\n    })).map(function (doc) {\n      console.log(\"docFromComapny insertCompany\", doc);\n      return {\n        type: AllAction.UPDATE_COMPANY_SUCCESS,\n        payload: \"Document successfully updated\"\n      };\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.UPDATE_COMPANY_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.getAllCompany = function (action$) {\n  return action$.ofType(AllAction.GET_ALL_COMPANY).do(function (x) {\n    return x;\n  }).switchMap(function () {\n    return Observable.fromPromise(appFirebase.firestore().collection(\"companies\").get()).map(function (querySnapshot) {\n      var arr = [];\n      console.log(\"docFromComapny getAllCompany\", querySnapshot);\n      querySnapshot.forEach(function (doc) {\n        arr.push(doc.data().payload); // doc.data() is never undefined for query doc snapshots\n\n        console.log(doc.id, \" => \", doc.data());\n      });\n      console.log(\"arr\", arr);\n\n      if (arr.length > 0) {\n        return {\n          type: AllAction.GET_ALL_COMPANY_SUCCESS,\n          payload: arr\n        };\n      } else {\n        return {\n          type: AllAction.GET_ALL_COMPANY_SUCCESS_FAILURE,\n          payload: \"No Data Found\"\n        };\n      }\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.GET_ALL_COMPANY_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.SignupDriver = function (action$) {\n  return action$.ofType(AllAction.INSERT_DRIVER).do(function (x) {\n    return x;\n  }).switchMap(function (_ref4) {\n    var payload = _ref4.payload;\n    console.log(\"PayloadFromSignupDriver\", payload);\n    return Observable.fromPromise(appFirebase.auth().createUserWithEmailAndPassword(payload.Email, payload.Password)).map(function (response) {\n      if (response) {\n        return {\n          type: AllAction.INSERT_DRIVER_SUCCESS,\n          payload: {\n            response: response,\n            payload: payload\n          }\n        };\n      } else {\n        return {\n          type: AllAction.SIGNUP_FAILURE,\n          payload: 'Server Error'\n        };\n      }\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.SIGNUP_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.insertDriver = function (action$) {\n  return action$.ofType(AllAction.INSERT_DRIVER_SUCCESS).do(function (x) {\n    return x;\n  }).switchMap(function (_ref5) {\n    var payload = _ref5.payload;\n    console.log(\"PayloadFrom\", payload);\n    var Driver = payload.payload;\n    return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").doc(payload.response.user.uid).set({\n      DriverName: Driver.DriverName,\n      Email: Driver.Email,\n      Password: Driver.Password,\n      VehicleNo: Driver.VehicleNo,\n      Address: Driver.Address,\n      RegistrationNo: Driver.RegistrationNo,\n      DrivingLicenceNo: Driver.DrivingLicenceNo,\n      Status: \"Pending\",\n      CompanyId: Driver.CompanyId,\n      DocumentUrl: Driver.DocumentUrl,\n      DriverID: payload.response.user.uid\n    })).map(function (response) {\n      console.log(\"responseFromComapny\", response);\n      return {\n        type: AllAction.INSERT_DRIVER_DATA_SUCCESS,\n        payload: \"Inserted Successfully\"\n      };\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.INSERT_DRIVER_DATA_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.getDriversList = function (action$) {\n  return action$.ofType(AllAction.GET_DRIVERS).do(function (x) {\n    return x;\n  }).switchMap(function (_ref6) {\n    var payload = _ref6.payload;\n    console.log(\"PayloadFrom\", payload);\n    var DriversRef = appFirebase.firestore().collection(\"Drivers\");\n    var arr = [];\n    return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").where(\"CompanyId\", \"==\", payload).get()).map(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        // doc.data() is never undefined for query doc snapshots\n        console.log(doc.id, \" => \", doc.data());\n        arr.push(doc.data());\n      });\n\n      if (arr.length > 0) {\n        console.log(\"PayloadFrom\", payload);\n        return {\n          type: AllAction.GET_DRIVERS_SUCCESS,\n          payload: arr\n        };\n      } else {\n        return {\n          type: AllAction.GET_ALL_DRIVERS_SUCCESS_FAILURE,\n          payload: \"No Data Found\"\n        };\n      }\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.GET_DRIVERS_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.updateDriver = function (action$) {\n  return action$.ofType(AllAction.UPDATE_DRIVER).do(function (x) {\n    return x;\n  }).switchMap(function (_ref7) {\n    var payload = _ref7.payload;\n    console.log(\"PayloadFrom UPDATE_DRIVER\", payload);\n    var Driver = payload;\n    return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").doc(payload.DriverID).update({\n      DriverName: Driver.DriverName,\n      Email: Driver.Email,\n      Password: Driver.Password,\n      VehicleNo: Driver.VehicleNo,\n      Address: Driver.Address,\n      RegistrationNo: Driver.RegistrationNo,\n      DrivingLicenceNo: Driver.DrivingLicenceNo,\n      Status: \"Pending\",\n      CompanyId: Driver.CompanyId,\n      DocumentUrl: Driver.DocumentUrl,\n      DriverID: Driver.DriverID\n    })).map(function (doc) {\n      return {\n        type: AllAction.UPDATE_DRIVER_SUCCESS,\n        payload: \"Document successfully updated\"\n      };\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.UPDATE_DRIVER_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.getDriverRequsetsList = function (action$) {\n  return action$.ofType(AllAction.GET_ALL_DRIVERS).do(function (x) {\n    return x;\n  }).switchMap(function (_ref8) {\n    var payload = _ref8.payload;\n    console.log(\"payloadEpic\", payload);\n    return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").where(\"CompanyId\", \"==\", payload).get()).map(function (querySnapshot) {\n      var arr = [];\n      console.log(\"docFromComapny getAllCompany\", querySnapshot);\n      querySnapshot.forEach(function (doc) {\n        arr.push(doc.data()); // doc.data() is never undefined for query doc snapshots\n\n        console.log(doc.id, \" => \", doc.data());\n      });\n      console.log(\"arr\", arr);\n\n      if (arr.length > 0) {\n        return {\n          type: AllAction.GET_ALL_DRIVERS_SUCCESS,\n          payload: arr\n        };\n      } else {\n        return {\n          type: AllAction.GET_ALL_DRIVERS_REQUEST_SUCCESS_FAILURE,\n          payload: \"No Data Found\"\n        };\n      }\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.GET_ALL_DRIVERS_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.insertAdminDriver = function (action$) {\n  return action$.ofType(AllAction.INSERT_DRIVER_BY_ADMIN).do(function (x) {\n    return x;\n  }).switchMap(function (_ref9) {\n    var _appFirebase$firestor;\n\n    var payload = _ref9.payload;\n    console.log(\"PayloadFrom\", payload);\n    var Driver = payload;\n    return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").doc(Driver.DriverID).set((_appFirebase$firestor = {\n      DriverName: Driver.DriverName,\n      Email: Driver.Email,\n      Password: Driver.Password,\n      VehicleNo: Driver.VehicleNo,\n      Address: Driver.Address,\n      RegistrationNo: Driver.RegistrationNo,\n      DrivingLicenceNo: Driver.DrivingLicenceNo,\n      CompanyId: Driver.CompanyId,\n      DocumentUrl: Driver.DocumentUrl,\n      DriverID: Driver.DriverID,\n      Status: Driver.Status\n    }, _defineProperty(_appFirebase$firestor, \"DocumentUrl\", Driver.DocumentUrl), _defineProperty(_appFirebase$firestor, \"Reason\", Driver.Reason), _appFirebase$firestor))).map(function (response) {\n      console.log(\"insertAdminDriver\", response);\n      return {\n        type: AllAction.INSERT_DRIVER_BY_ADMIN_SUCCESS,\n        payload: \"Inserted Successfully\"\n      };\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.INSERT_DRIVER_BY_ADMIN_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.insertProducts = function (action$) {\n  return action$.ofType(AllAction.INSERT_PRODUCTS).do(function (x) {\n    return x;\n  }).switchMap(function (_ref10) {\n    var payload = _ref10.payload;\n    console.log(\"PayloadFrom\", payload);\n    return Observable.fromPromise(appFirebase.firestore().collection(\"products\").doc(payload.ProductsID).set({\n      payload: payload\n    })).map(function (response) {\n      console.log(\"insertProducts\", response);\n      return {\n        type: AllAction.INSERT_PRODUCTS_SUCCESS,\n        payload: \"Inserted Successfully\"\n      };\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.INSERT_PRODUCTS_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.getProductsList = function (action$) {\n  return action$.ofType(AllAction.GET_PRODUCTS).do(function (x) {\n    return x;\n  }).switchMap(function (_ref11) {\n    var payload = _ref11.payload;\n    console.log(\"PayloadFrom getCompany\", payload);\n    var arr = [];\n    return Observable.fromPromise(appFirebase.firestore().collection(\"products\").where(\"payload.CompanyId\", \"==\", payload).get()).map(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        // doc.data() is never undefined for query doc snapshots\n        console.log(doc.id, \" => \", doc.data().payload);\n        arr.push(doc.data().payload);\n      });\n\n      if (arr.length > 0) {\n        console.log(\"PayloadFrom\", payload);\n        return {\n          type: AllAction.GET_PRODUCTS_SUCCESS,\n          payload: arr\n        };\n      } else {\n        return {\n          type: AllAction.GET_PRODUCTS_SUCCESS_FAILURE,\n          payload: \"No Data Found\"\n        };\n      }\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.GET_PRODUCTS_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.insertCategories = function (action$) {\n  return action$.ofType(AllAction.INSERT_CATEGORIES).do(function (x) {\n    return x;\n  }).switchMap(function (_ref12) {\n    var payload = _ref12.payload;\n    console.log(\"PayloadFrom\", payload);\n    return Observable.fromPromise(appFirebase.firestore().collection(\"categories(\".concat(payload.CpmapnyID, \")\")).add({\n      payload: payload\n    })).map(function (response) {\n      console.log(\"responseFromComapny\", response);\n      return {\n        type: AllAction.INSERT_CATEGORIES_SUCCESS,\n        payload: \"Inserted Successfully\"\n      };\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.INSERT_CATEGORIES_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.insertTermsConditions = function (action$) {\n  return action$.ofType(AllAction.INSERT_TERM_AND_CONDITIONS).do(function (x) {\n    return x;\n  }).switchMap(function (_ref13) {\n    var payload = _ref13.payload;\n    console.log(\"PayloadFrom\", payload);\n    return Observable.fromPromise(appFirebase.firestore().collection(\"TermsConditions\").doc(\"TermsConditions\").set({\n      payload: payload\n    })).map(function (response) {\n      console.log(\"responseFromComapny\", response);\n      return {\n        type: AllAction.INSERT_TERM_AND_CONDITIONS_SUCCESS,\n        payload: \"Inserted Successfully\"\n      };\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.INSERT_TERM_AND_CONDITIONS_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nAllActionEpic.GetTermsAndCondition = function (action$) {\n  return action$.ofType(AllAction.GET_TERMS_AND_CONDITIOND).do(function (x) {\n    return x;\n  }).switchMap(function () {\n    var arr = [];\n    return Observable.fromPromise(appFirebase.firestore().collection(\"TermsConditions\").doc(\"TermsConditions\").get()).map(function (response) {\n      console.log(\"GetTermsAndCondition\", response.data());\n      return {\n        type: AllAction.GET_TERMS_AND_CONDITIOND_SUCCESS,\n        payload: response.data()\n      };\n    }).catch(function (err) {\n      return Observable.of({\n        type: AllAction.GET_TERMS_AND_CONDITIOND_FAILURE,\n        payload: err\n      });\n    });\n  });\n};\n\nexport { AllActionEpic as default };","map":{"version":3,"sources":["D:/Github/Admin_Panel/src/store/epic/AllActions.js"],"names":["Observable","AllAction","appFirebase","constants","constant","getConstant","AllActionEpic","insertCompany","action$","ofType","INSERT_COMPANY","do","x","switchMap","payload","console","log","Company","fromPromise","firestore","collection","doc","uid","set","CompanyName","AboutCompany","OwnerName","CompanyLocation","NoOFEmployee","RegistrationNo","GSTN_No","Status","DocumentUrl","latitude","longitude","rating","ratings","noOfUsers","driver","category","products","map","response","type","INSERT_COMPANY_SUCCESS","catch","err","of","INSERT_COMPANY_FAILURE","getCompany","GET_COMPANY","get","exists","GET_COMPANY_SUCCESS","data","GET_COMPANY_SUCCESS_FAILURE","GET_COMPANY_FAILURE","updateCompany","UPDATE_COMPANY","update","UPDATE_COMPANY_SUCCESS","UPDATE_COMPANY_FAILURE","getAllCompany","GET_ALL_COMPANY","querySnapshot","arr","forEach","push","id","length","GET_ALL_COMPANY_SUCCESS","GET_ALL_COMPANY_SUCCESS_FAILURE","GET_ALL_COMPANY_FAILURE","SignupDriver","INSERT_DRIVER","auth","createUserWithEmailAndPassword","Email","Password","INSERT_DRIVER_SUCCESS","SIGNUP_FAILURE","insertDriver","Driver","user","DriverName","VehicleNo","Address","DrivingLicenceNo","CompanyId","DriverID","INSERT_DRIVER_DATA_SUCCESS","INSERT_DRIVER_DATA_FAILURE","getDriversList","GET_DRIVERS","DriversRef","where","GET_DRIVERS_SUCCESS","GET_ALL_DRIVERS_SUCCESS_FAILURE","GET_DRIVERS_FAILURE","updateDriver","UPDATE_DRIVER","UPDATE_DRIVER_SUCCESS","UPDATE_DRIVER_FAILURE","getDriverRequsetsList","GET_ALL_DRIVERS","GET_ALL_DRIVERS_SUCCESS","GET_ALL_DRIVERS_REQUEST_SUCCESS_FAILURE","GET_ALL_DRIVERS_FAILURE","insertAdminDriver","INSERT_DRIVER_BY_ADMIN","Reason","INSERT_DRIVER_BY_ADMIN_SUCCESS","INSERT_DRIVER_BY_ADMIN_FAILURE","insertProducts","INSERT_PRODUCTS","ProductsID","INSERT_PRODUCTS_SUCCESS","INSERT_PRODUCTS_FAILURE","getProductsList","GET_PRODUCTS","GET_PRODUCTS_SUCCESS","GET_PRODUCTS_SUCCESS_FAILURE","GET_PRODUCTS_FAILURE","insertCategories","INSERT_CATEGORIES","CpmapnyID","add","INSERT_CATEGORIES_SUCCESS","INSERT_CATEGORIES_FAILURE","insertTermsConditions","INSERT_TERM_AND_CONDITIONS","INSERT_TERM_AND_CONDITIONS_SUCCESS","INSERT_TERM_AND_CONDITIONS_FAILURE","GetTermsAndCondition","GET_TERMS_AND_CONDITIOND","GET_TERMS_AND_CONDITIOND_SUCCESS","GET_TERMS_AND_CONDITIOND_FAILURE"],"mappings":"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","sourcesContent":["/*eslint-disable */\r\nimport { Observable } from 'rxjs';\r\nimport { AllAction, } from './../action/index';\r\nimport appFirebase from '../../utilities/Firebase'\r\nimport constants from '../../utilities/constants';// eslint-disable-next-line\r\nconst constant = constants.getConstant();\r\n\r\nexport default class AllActionEpic {\r\n\r\n\r\n\r\n    static insertCompany = (action$) =>\r\n        action$.ofType(AllAction.INSERT_COMPANY)\r\n\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom\", payload)\r\n                let Company = payload\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"companies\").doc(payload.uid).set({\r\n\r\n\r\n                    CompanyName: Company.CompanyName,\r\n                    AboutCompany: Company.AboutCompany,\r\n                    OwnerName: Company.OwnerName,\r\n                    CompanyLocation: Company.CompanyLocation,\r\n                    NoOFEmployee: Company.NoOFEmployee,\r\n                    RegistrationNo: Company.RegistrationNo,\r\n                    GSTN_No: Company.GSTN_No,\r\n                    Status: \"Pending\",\r\n                    uid:Company.uid,\r\n                    DocumentUrl: Company.DocumentUrl,\r\n                    latitude: 24.9159156,\r\n                    longitude: 67.0573662,\r\n                    rating: {\r\n                        ratings: '0',\r\n                        noOfUsers: '0',\r\n                    },\r\n\r\n\r\n                    driver: [],\r\n                    category: [],\r\n                    products: []\r\n                }))\r\n                    .map((response) => {\r\n                        console.log(\"responseFromComapny\", response)\r\n\r\n                        return {\r\n                            type: AllAction.INSERT_COMPANY_SUCCESS,\r\n                            payload: \"Inserted Successfully\"\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.INSERT_COMPANY_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n    static getCompany = (action$) =>\r\n        action$.ofType(AllAction.GET_COMPANY)\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom getCompany\", payload)\r\n\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"companies\").doc(payload).get())\r\n                    .map((doc) => {\r\n                        console.log(\"docFromComapny getCompany\")\r\n                        if (doc.exists) {\r\n                            return {\r\n                                type: AllAction.GET_COMPANY_SUCCESS,\r\n                                payload: [doc.data()]\r\n                            }\r\n                        }\r\n                        else {\r\n\r\n                            return {\r\n                                type: AllAction.GET_COMPANY_SUCCESS_FAILURE,\r\n                                payload: \"No Data Found\"\r\n                            }\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.GET_COMPANY_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n    static updateCompany = (action$) =>\r\n        action$.ofType(AllAction.UPDATE_COMPANY)\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom insertCompany\", payload)\r\n                let Company = payload\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"companies\").doc(payload.uid).update(\r\n                    { \r\n                        CompanyName: Company.CompanyName,\r\n                        AboutCompany: Company.AboutCompany,\r\n                        OwnerName: Company.OwnerName,\r\n                        CompanyLocation: Company.CompanyLocation,\r\n                        NoOFEmployee: Company.NoOFEmployee,\r\n                        RegistrationNo: Company.RegistrationNo,\r\n                        GSTN_No: Company.GSTN_No,\r\n                        Status: \"Pending\",\r\n                        uid:Company.uid,\r\n                        DocumentUrl: Company.DocumentUrl,\r\n                        latitude: 24.9159156,\r\n                        longitude: 67.0573662,\r\n                        \r\n    \r\n    \r\n                        \r\n                     }\r\n                ))\r\n                    .map((doc) => {\r\n                        console.log(\"docFromComapny insertCompany\", doc)\r\n\r\n                        return {\r\n                            type: AllAction.UPDATE_COMPANY_SUCCESS,\r\n                            payload: \"Document successfully updated\"\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.UPDATE_COMPANY_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n    static getAllCompany = (action$) =>\r\n        action$.ofType(AllAction.GET_ALL_COMPANY)\r\n            .do(x => (x))\r\n            .switchMap(() => {\r\n\r\n\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"companies\").get())\r\n                    .map((querySnapshot) => {\r\n                        let arr = []\r\n                        console.log(\"docFromComapny getAllCompany\", querySnapshot)\r\n                        querySnapshot.forEach(function (doc) {\r\n                            arr.push(doc.data().payload)\r\n                            // doc.data() is never undefined for query doc snapshots\r\n                            console.log(doc.id, \" => \", doc.data());\r\n                        })\r\n                        console.log(\"arr\", arr)\r\n                        if (arr.length > 0) {\r\n                            return {\r\n                                type: AllAction.GET_ALL_COMPANY_SUCCESS,\r\n                                payload: arr\r\n                            }\r\n                        }\r\n                        else {\r\n\r\n                            return {\r\n                                type: AllAction.GET_ALL_COMPANY_SUCCESS_FAILURE,\r\n                                payload: \"No Data Found\"\r\n                            }\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.GET_ALL_COMPANY_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n    static SignupDriver = (action$) =>\r\n        action$.ofType(AllAction.INSERT_DRIVER)\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFromSignupDriver\", payload)\r\n                return Observable.fromPromise(appFirebase.auth().createUserWithEmailAndPassword(payload.Email, payload.Password))\r\n                    .map((response) => {\r\n\r\n                        if (response) {\r\n                            return {\r\n                                type: AllAction.INSERT_DRIVER_SUCCESS,\r\n                                payload: { response, payload }\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                type: AllAction.SIGNUP_FAILURE,\r\n                                payload: 'Server Error'\r\n                            };\r\n                        }\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.SIGNUP_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n    static insertDriver = (action$) =>\r\n        action$.ofType(AllAction.INSERT_DRIVER_SUCCESS)\r\n\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom\", payload)\r\n                let Driver = payload.payload\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").doc(payload.response.user.uid).set(\r\n                    {\r\n                        DriverName: Driver.DriverName,\r\n                        Email: Driver.Email,\r\n                        Password: Driver.Password,\r\n                        VehicleNo: Driver.VehicleNo,\r\n                        Address: Driver.Address,\r\n                        RegistrationNo: Driver.RegistrationNo,\r\n                        DrivingLicenceNo: Driver.DrivingLicenceNo,\r\n                        Status: \"Pending\",\r\n                        CompanyId: Driver.CompanyId,\r\n                        DocumentUrl: Driver.DocumentUrl,\r\n                        DriverID: payload.response.user.uid\r\n\r\n\r\n\r\n                    }\r\n                ))\r\n                    .map((response) => {\r\n                        console.log(\"responseFromComapny\", response)\r\n\r\n                        return {\r\n                            type: AllAction.INSERT_DRIVER_DATA_SUCCESS,\r\n                            payload: \"Inserted Successfully\"\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.INSERT_DRIVER_DATA_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n    static getDriversList = (action$) =>\r\n\r\n        action$.ofType(AllAction.GET_DRIVERS)\r\n\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom\", payload)\r\n                var DriversRef = appFirebase.firestore().collection(\"Drivers\");\r\n\r\n                let arr = []\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").where(\"CompanyId\", \"==\", payload)\r\n                    .get())\r\n                    .map((querySnapshot) => {\r\n                        querySnapshot.forEach(function (doc) {\r\n                            // doc.data() is never undefined for query doc snapshots\r\n                            console.log(doc.id, \" => \", doc.data());\r\n                            arr.push(doc.data())\r\n                        })\r\n                        if (arr.length > 0) {\r\n                            console.log(\"PayloadFrom\", payload)\r\n                            return {\r\n                                type: AllAction.GET_DRIVERS_SUCCESS,\r\n                                payload: arr\r\n                            }\r\n                        }\r\n                        else {\r\n\r\n                            return {\r\n                                type: AllAction.GET_ALL_DRIVERS_SUCCESS_FAILURE,\r\n                                payload: \"No Data Found\"\r\n                            }\r\n                        }\r\n\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.GET_DRIVERS_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n    static updateDriver = (action$) =>\r\n        action$.ofType(AllAction.UPDATE_DRIVER)\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom UPDATE_DRIVER\", payload)\r\n                let Driver = payload\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").doc(payload.DriverID).update(\r\n                    {\r\n                        DriverName: Driver.DriverName,\r\n                        Email: Driver.Email,\r\n                        Password: Driver.Password,\r\n                        VehicleNo: Driver.VehicleNo,\r\n                        Address: Driver.Address,\r\n                        RegistrationNo: Driver.RegistrationNo,\r\n                        DrivingLicenceNo: Driver.DrivingLicenceNo,\r\n                        Status: \"Pending\",\r\n                        CompanyId: Driver.CompanyId,\r\n                        DocumentUrl: Driver.DocumentUrl,\r\n                        DriverID: Driver.DriverID\r\n\r\n\r\n\r\n                    }\r\n                ))\r\n                    .map((doc) => {\r\n\r\n\r\n                        return {\r\n                            type: AllAction.UPDATE_DRIVER_SUCCESS,\r\n                            payload: \"Document successfully updated\"\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.UPDATE_DRIVER_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n    static getDriverRequsetsList = (action$) =>\r\n        action$.ofType(AllAction.GET_ALL_DRIVERS)\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"payloadEpic\", payload)\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").where(\"CompanyId\", \"==\", payload).get())\r\n                    .map((querySnapshot) => {\r\n                        let arr = []\r\n                        console.log(\"docFromComapny getAllCompany\", querySnapshot)\r\n                        querySnapshot.forEach(function (doc) {\r\n                            arr.push(doc.data())\r\n                            // doc.data() is never undefined for query doc snapshots\r\n                            console.log(doc.id, \" => \", doc.data());\r\n                        })\r\n                        console.log(\"arr\", arr)\r\n                        if (arr.length > 0) {\r\n                            return {\r\n                                type: AllAction.GET_ALL_DRIVERS_SUCCESS,\r\n                                payload: arr\r\n                            }\r\n                        }\r\n                        else {\r\n\r\n                            return {\r\n                                type: AllAction.GET_ALL_DRIVERS_REQUEST_SUCCESS_FAILURE,\r\n                                payload: \"No Data Found\"\r\n                            }\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.GET_ALL_DRIVERS_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    static insertAdminDriver = (action$) =>\r\n        action$.ofType(AllAction.INSERT_DRIVER_BY_ADMIN)\r\n\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom\", payload)\r\n                let Driver = payload\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"Drivers\").doc(Driver.DriverID).set(\r\n                    {\r\n                        DriverName: Driver.DriverName,\r\n                        Email: Driver.Email,\r\n                        Password: Driver.Password,\r\n                        VehicleNo: Driver.VehicleNo,\r\n                        Address: Driver.Address,\r\n                        RegistrationNo: Driver.RegistrationNo,\r\n                        DrivingLicenceNo: Driver.DrivingLicenceNo,\r\n                        CompanyId: Driver.CompanyId,\r\n                        DocumentUrl: Driver.DocumentUrl,\r\n                        DriverID: Driver.DriverID,\r\n                        Status: Driver.Status,\r\n                        DocumentUrl: Driver.DocumentUrl,\r\n                        Reason: Driver.Reason\r\n\r\n\r\n                    }\r\n                ))\r\n                    .map((response) => {\r\n                        console.log(\"insertAdminDriver\", response)\r\n\r\n                        return {\r\n                            type: AllAction.INSERT_DRIVER_BY_ADMIN_SUCCESS,\r\n                            payload: \"Inserted Successfully\"\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.INSERT_DRIVER_BY_ADMIN_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    static insertProducts = (action$) =>\r\n        action$.ofType(AllAction.INSERT_PRODUCTS)\r\n\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom\", payload)\r\n\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"products\").doc(payload.ProductsID).set({\r\n                    payload\r\n                }))\r\n                    .map((response) => {\r\n                        console.log(\"insertProducts\", response)\r\n\r\n                        return {\r\n                            type: AllAction.INSERT_PRODUCTS_SUCCESS,\r\n                            payload: \"Inserted Successfully\"\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.INSERT_PRODUCTS_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    static getProductsList = (action$) =>\r\n        action$.ofType(AllAction.GET_PRODUCTS)\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom getCompany\", payload)\r\n                let arr = []\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"products\").where(\"payload.CompanyId\", \"==\", payload)\r\n                    .get())\r\n                    .map((querySnapshot) => {\r\n                        querySnapshot.forEach(function (doc) {\r\n                            // doc.data() is never undefined for query doc snapshots\r\n                            console.log(doc.id, \" => \", doc.data().payload);\r\n                            arr.push(doc.data().payload)\r\n                        })\r\n                        if (arr.length > 0) {\r\n                            console.log(\"PayloadFrom\", payload)\r\n                            return {\r\n                                type: AllAction.GET_PRODUCTS_SUCCESS,\r\n                                payload: arr\r\n                            }\r\n                        }\r\n                        else {\r\n\r\n                            return {\r\n                                type: AllAction.GET_PRODUCTS_SUCCESS_FAILURE,\r\n                                payload: \"No Data Found\"\r\n                            }\r\n                        }\r\n                    })\r\n                    .catch(err => Observable.of({\r\n                        type: AllAction.GET_PRODUCTS_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    static insertCategories = (action$) =>\r\n        action$.ofType(AllAction.INSERT_CATEGORIES)\r\n\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom\", payload)\r\n\r\n                return Observable.fromPromise(appFirebase.firestore().collection(`categories(${payload.CpmapnyID})`).add({\r\n                    payload\r\n                }))\r\n                    .map((response) => {\r\n                        console.log(\"responseFromComapny\", response)\r\n\r\n                        return {\r\n                            type: AllAction.INSERT_CATEGORIES_SUCCESS,\r\n                            payload: \"Inserted Successfully\"\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.INSERT_CATEGORIES_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n\r\n    static insertTermsConditions = (action$) =>\r\n        action$.ofType(AllAction.INSERT_TERM_AND_CONDITIONS)\r\n\r\n            .do(x => (x))\r\n            .switchMap(({ payload }) => {\r\n                console.log(\"PayloadFrom\", payload)\r\n\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"TermsConditions\").doc(\"TermsConditions\").set({\r\n                    payload\r\n                }))\r\n                    .map((response) => {\r\n                        console.log(\"responseFromComapny\", response)\r\n\r\n                        return {\r\n                            type: AllAction.INSERT_TERM_AND_CONDITIONS_SUCCESS,\r\n                            payload: \"Inserted Successfully\"\r\n                        }\r\n\r\n                    }).catch(err => Observable.of({\r\n                        type: AllAction.INSERT_TERM_AND_CONDITIONS_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n\r\n\r\n\r\n    static GetTermsAndCondition = (action$) =>\r\n        action$.ofType(AllAction.GET_TERMS_AND_CONDITIOND)\r\n            .do(x => (x))\r\n            .switchMap(() => {\r\n\r\n                let arr = []\r\n                return Observable.fromPromise(appFirebase.firestore().collection(\"TermsConditions\").doc(\"TermsConditions\")\r\n                    .get())\r\n                    .map((response) => {\r\n                        console.log(\"GetTermsAndCondition\", response.data())\r\n\r\n                        return {\r\n                            type: AllAction.GET_TERMS_AND_CONDITIOND_SUCCESS,\r\n                            payload: response.data()\r\n                        }\r\n\r\n                    })\r\n                    .catch(err => Observable.of({\r\n                        type: AllAction.GET_TERMS_AND_CONDITIOND_FAILURE,\r\n                        payload: err\r\n                    }));\r\n            });\r\n\r\n}"]},"metadata":{},"sourceType":"module"}