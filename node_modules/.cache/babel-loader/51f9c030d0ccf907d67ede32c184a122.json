{"ast":null,"code":"import { filter } from 'rxjs/operator/filter';\n\nvar keyHasType = function keyHasType(type, key) {\n  return type === key || typeof key === 'function' && type === key.toString();\n};\n\nexport function ofType() {\n  for (var _len = arguments.length, keys = Array(_len), _key = 0; _key < _len; _key++) {\n    keys[_key] = arguments[_key];\n  }\n\n  return function ofTypeOperatorFunction(source) {\n    return filter.call(source, function (_ref) {\n      var type = _ref.type;\n      var len = keys.length;\n\n      if (len === 1) {\n        return keyHasType(type, keys[0]);\n      } else {\n        for (var i = 0; i < len; i++) {\n          if (keyHasType(type, keys[i])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  };\n}","map":{"version":3,"sources":["D:/Github/Admin_Panel/node_modules/redux-observable/lib/esm/operators.js"],"names":["filter","keyHasType","type","key","toString","ofType","_len","arguments","length","keys","Array","_key","ofTypeOperatorFunction","source","call","_ref","len","i"],"mappings":"AAAA,SAASA,MAAT,QAAuB,sBAAvB;;AAEA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,GAA1B,EAA+B;AAC9C,SAAOD,IAAI,KAAKC,GAAT,IAAgB,OAAOA,GAAP,KAAe,UAAf,IAA6BD,IAAI,KAAKC,GAAG,CAACC,QAAJ,EAA7D;AACD,CAFD;;AAIA,OAAO,SAASC,MAAT,GAAkB;AACvB,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAGC,KAAK,CAACJ,IAAD,CAAzC,EAAiDK,IAAI,GAAG,CAA7D,EAAgEA,IAAI,GAAGL,IAAvE,EAA6EK,IAAI,EAAjF,EAAqF;AACnFF,IAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,SAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC7C,WAAOb,MAAM,CAACc,IAAP,CAAYD,MAAZ,EAAoB,UAAUE,IAAV,EAAgB;AACzC,UAAIb,IAAI,GAAGa,IAAI,CAACb,IAAhB;AAEA,UAAIc,GAAG,GAAGP,IAAI,CAACD,MAAf;;AACA,UAAIQ,GAAG,KAAK,CAAZ,EAAe;AACb,eAAOf,UAAU,CAACC,IAAD,EAAOO,IAAI,CAAC,CAAD,CAAX,CAAjB;AACD,OAFD,MAEO;AACL,aAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;AAC5B,cAAIhB,UAAU,CAACC,IAAD,EAAOO,IAAI,CAACQ,CAAD,CAAX,CAAd,EAA+B;AAC7B,mBAAO,IAAP;AACD;AACF;AACF;;AACD,aAAO,KAAP;AACD,KAdM,CAAP;AAeD,GAhBD;AAiBD","sourcesContent":["import { filter } from 'rxjs/operator/filter';\n\nvar keyHasType = function keyHasType(type, key) {\n  return type === key || typeof key === 'function' && type === key.toString();\n};\n\nexport function ofType() {\n  for (var _len = arguments.length, keys = Array(_len), _key = 0; _key < _len; _key++) {\n    keys[_key] = arguments[_key];\n  }\n\n  return function ofTypeOperatorFunction(source) {\n    return filter.call(source, function (_ref) {\n      var type = _ref.type;\n\n      var len = keys.length;\n      if (len === 1) {\n        return keyHasType(type, keys[0]);\n      } else {\n        for (var i = 0; i < len; i++) {\n          if (keyHasType(type, keys[i])) {\n            return true;\n          }\n        }\n      }\n      return false;\n    });\n  };\n}"]},"metadata":{},"sourceType":"module"}