{"ast":null,"code":"import _objectSpread from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Github\\\\Admin_Panel\\\\src\\\\container\\\\TermsConditions\\\\TermsConditions.js\";\n\n/*eslint-disable */\nimport React, { useState, useRef, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\nimport GlobalHeader from \"../../components/GlobalHeader/GlobalHeader\";\nimport { AllAction } from '../../store/action';\nimport { Button } from 'primereact/button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport Buttons from '@material-ui/core/Button';\nimport ErrorBox from '../../components/ErrorBox/ErrorBox';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport appFirebase from '../../utilities/Firebase';\n\nvar TermsConditions = function TermsConditions(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loadingOnSave = _useState2[0],\n      setloadingOnSave = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorBox = _useState4[0],\n      setErrorBox = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      msgString = _useState6[0],\n      setMsgString = _useState6[1];\n\n  var _useState7 = useState({\n    TermsConditions: ''\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      TermsConditions = _useState8[0],\n      setTermsConditions = _useState8[1];\n\n  var checkFields = function checkFields() {\n    if (TermsConditions.TermsConditions === '' || TermsConditions.TermsConditions === null || TermsConditions.TermsConditions === undefined) {\n      setMsgString('Plaes Insert Terms Conditions');\n      setErrorBox(true);\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  var handleSave = function handleSave() {\n    if (checkFields()) {\n      setloadingOnSave(true);\n      var payload = {\n        TermsConditions: TermsConditions.TermsConditions\n      };\n      console.log(\"payload\", payload);\n      props.insertTermsConditions(payload);\n    }\n\n    ;\n  };\n\n  var hideError = function hideError() {\n    setErrorBox(false);\n    setMsgString('');\n  };\n\n  useEffect(function () {\n    if (props.error) {\n      setMsgString('Server Error');\n      setErrorBox(true);\n    }\n\n    if (props.insertTermsConditionsRes) {\n      window.location = \"#/DashBoard\";\n      props.AllListsNull();\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-grid\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-col-12 p-lg-12\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ErrorBox, {\n    open: errorBox,\n    onClose: hideError,\n    msg: msgString,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(GlobalHeader, {\n    loading: loadingOnSave,\n    goBack: function goBack() {\n      return props.history.goBack();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-grid\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-col-12 p-lg-12\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card card-w-title \",\n    style: {\n      boxShadow: \"-1px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-grid\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-col-6 p-lg-12\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    multiline: true,\n    label: \"Add Termd and Conditions Text\",\n    onChange: function onChange(e) {\n      return setTermsConditions(_objectSpread(_objectSpread({}, TermsConditions), {}, {\n        TermsConditions: e.target.value\n      }));\n    },\n    value: TermsConditions.TermsConditions,\n    fullWidth: true,\n    style: {\n      display: 'block'\n    },\n    variant: \"outlined\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-col-2 p-offset-8 \",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Submit\",\n    icon: \"pi pi-check\",\n    onClick: handleSave,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 37\n    }\n  }))))))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    error: state.AllActionReducer.error,\n    insertTermsConditionsRes: state.AllActionReducer.insertTermsConditionsRes\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    AllListsNull: function AllListsNull() {\n      return dispatch(AllAction.AllListsNull());\n    },\n    insertTermsConditions: function insertTermsConditions(payload) {\n      return dispatch(AllAction.insertTermsConditions(payload));\n    },\n    updateTermsConditions: function updateTermsConditions(payload) {\n      return dispatch(AllAction.updateTermsConditions(payload));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TermsConditions);","map":{"version":3,"sources":["D:/Github/Admin_Panel/src/container/TermsConditions/TermsConditions.js"],"names":["React","useState","useRef","useEffect","connect","TextField","GlobalHeader","AllAction","Button","Dialog","MuiDialogActions","MuiDialogTitle","Typography","Buttons","ErrorBox","DialogContent","appFirebase","TermsConditions","props","loadingOnSave","setloadingOnSave","errorBox","setErrorBox","msgString","setMsgString","setTermsConditions","checkFields","undefined","handleSave","payload","console","log","insertTermsConditions","hideError","error","insertTermsConditionsRes","window","location","AllListsNull","history","goBack","boxShadow","e","target","value","display","mapStateToProps","state","AllActionReducer","mapDispatchToProps","dispatch","updateTermsConditions"],"mappings":"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","sourcesContent":["/*eslint-disable */\r\nimport React, { useState, useRef, useEffect, } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport GlobalHeader from \"../../components/GlobalHeader/GlobalHeader\"\r\nimport { AllAction } from '../../store/action';\r\nimport { Button } from 'primereact/button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Buttons from '@material-ui/core/Button';\r\nimport ErrorBox from '../../components/ErrorBox/ErrorBox';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport appFirebase from '../../utilities/Firebase';\r\n\r\nconst TermsConditions = (props) => {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [loadingOnSave, setloadingOnSave] = useState(false);\r\n    const [errorBox, setErrorBox] = useState(false);\r\n    const [msgString, setMsgString] = useState('');\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [TermsConditions, setTermsConditions] = useState({\r\n        TermsConditions: '',\r\n\r\n\r\n    });\r\n    const checkFields = () => {\r\n        if (TermsConditions.TermsConditions === '' || TermsConditions.TermsConditions === null || TermsConditions.TermsConditions === undefined) {\r\n            setMsgString('Plaes Insert Terms Conditions');\r\n            setErrorBox(true);\r\n            return false;\r\n        }\r\n\r\n\r\n        else {\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    const handleSave = () => {\r\n        if (checkFields()) {\r\n            setloadingOnSave(true)\r\n            let payload = {\r\n                TermsConditions: TermsConditions.TermsConditions,\r\n\r\n\r\n            }\r\n            console.log(\"payload\", payload)\r\n            props.insertTermsConditions(payload)\r\n        };\r\n    }\r\n\r\n    const hideError = () => {\r\n        setErrorBox(false);\r\n        setMsgString('');\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.error) {\r\n            setMsgString('Server Error');\r\n            setErrorBox(true);\r\n        }\r\n\r\n        if (props.insertTermsConditionsRes) {\r\n\r\n            window.location = \"#/DashBoard\";\r\n\r\n            props.AllListsNull()\r\n        }\r\n\r\n\r\n\r\n\r\n    })\r\n    return (\r\n        <div className=\"p-grid\">\r\n            <div className=\"p-col-12 p-lg-12\">\r\n                <ErrorBox open={errorBox} onClose={hideError} msg={msgString} />\r\n\r\n                <GlobalHeader\r\n                    loading={loadingOnSave}\r\n                    goBack={() => props.history.goBack()}\r\n                />\r\n\r\n\r\n                <div className=\"p-grid\">\r\n                    <div className=\"p-col-12 p-lg-12\">\r\n                        <div className=\"card card-w-title \" style={{ boxShadow: \"-1px 3px 1px -2px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 1px 5px 0px rgba(0,0,0,0.12)\" }} >\r\n                            <div className=\"p-grid\">\r\n\r\n\r\n\r\n\r\n                                <div className=\"p-col-6 p-lg-12\">\r\n                                    <TextField\r\n                                        multiline\r\n                                        label=\"Add Termd and Conditions Text\" onChange={e => setTermsConditions({ ...TermsConditions, TermsConditions: e.target.value })} value={TermsConditions.TermsConditions} fullWidth style={{ display: 'block' }} variant=\"outlined\" />\r\n                                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                <div className=\"p-col-2 p-offset-8 \">\r\n                                    <Button label=\"Submit\" icon=\"pi pi-check\" onClick={handleSave} />\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        error: state.AllActionReducer.error,\r\n\r\n        insertTermsConditionsRes: state.AllActionReducer.insertTermsConditionsRes,\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        AllListsNull: () => dispatch(AllAction.AllListsNull()),\r\n        insertTermsConditions: (payload) => dispatch(AllAction.insertTermsConditions(payload)),\r\n\r\n        updateTermsConditions: (payload) => dispatch(AllAction.updateTermsConditions(payload)),\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TermsConditions);"]},"metadata":{},"sourceType":"module"}