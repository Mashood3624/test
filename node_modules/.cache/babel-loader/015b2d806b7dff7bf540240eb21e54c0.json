{"ast":null,"code":"import _slicedToArray from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Github\\\\Admin_Panel\\\\src\\\\container\\\\DashBoard\\\\DashBoard.js\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Growl } from 'primereact/growl';\nimport MaterialTable from 'material-table';\nimport VisibilityOutlinedIcon from '@material-ui/icons/VisibilityOutlined';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { AllAction } from '../../store/action/index';\nimport DeleteBox from '../../components/DeleteBox/DeleteBox';\nimport ErrorBox from '../../components/ErrorBox/ErrorBox';\n\nvar DashBoard = function DashBoard(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      deleteBox = _useState2[0],\n      setDeleteBox = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingDelete = _useState4[0],\n      setloadingDelete = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      actionCol = _useState6[0],\n      setActionCol = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errorBox = _useState8[0],\n      setErrorBox = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      msgString = _useState10[0],\n      setMsgString = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      selectedList = _useState12[0],\n      setSelectedList = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      List = _useState14[0],\n      setList = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      loading = _useState16[0],\n      setLoading = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      AddBtn = _useState18[0],\n      setAddBtn = _useState18[1];\n\n  var _useState19 = useState({\n    Code: '',\n    ID: '',\n    SizeName: '',\n    InActive: false\n  }),\n      _useState20 = _slicedToArray(_useState19, 2),\n      property = _useState20[0],\n      updatePropert = _useState20[1];\n\n  var onClickDelete = function onClickDelete(rowData) {\n    setDeleteBox(true);\n    setSelectedList(rowData);\n    setMsgString('Are you sure want to delete ?');\n  };\n\n  var Delete = function Delete() {\n    setloadingDelete(true);\n    var ID = selectedList.ItemID;\n    var payload = {\n      FormName: 'Items',\n      ID: ID\n    }; // props.deleteAllLists(payload);\n  };\n\n  var hide = function hide() {\n    setSelectedList(null);\n    setDeleteBox(false);\n  }; // const latestProps = useRef(props);\n\n\n  useEffect(function () {\n    props.getAllCompany();\n    setLoading(true);\n    var SuperAdmin = JSON.parse(sessionStorage.getItem('SuperAdmin'));\n\n    if (SuperAdmin === null) {\n      window.location = \"#/access\";\n    }\n  }, []);\n  useEffect(function () {\n    if (props.error) {\n      setMsgString(props.error);\n      setLoading(false);\n      setloadingDelete(false);\n      setErrorBox(true);\n      props.AllListsNull();\n    }\n\n    if (props.getAllCompanyList) {\n      props.AllListsNull();\n      setLoading(false);\n      console.log(\"getAllCompanyList\", props.getAllCompanyList);\n      setList(props.getAllCompanyList);\n    }\n\n    ;\n\n    if (props.getAllCompanyListNull) {\n      props.AllListsNull();\n      setLoading(false);\n      setErrorBox(true);\n      setMsgString(\"No Record Found, Please add company details\");\n      setAddBtn(true);\n      setList([]);\n    }\n\n    ;\n  });\n  var growl;\n\n  var addView = function addView(rowData) {\n    var data = {\n      Company: Object.assign({}, rowData),\n      newList: false,\n      viewList: true,\n      editList: false\n    };\n    props.history.push({\n      pathname: \"DashBoardForm\",\n      data: data\n    });\n  };\n\n  var hideError = function hideError() {\n    setErrorBox(false);\n    setMsgString('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-grid p-fluid\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-col-12 p-lg-12\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ErrorBox, {\n    open: errorBox,\n    onClose: hideError,\n    msg: msgString,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Growl, {\n    ref: function ref(el) {\n      return growl = el;\n    },\n    position: \"topright\",\n    style: {\n      marginTop: '50px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MaterialTable, {\n    style: {\n      padding: '10px'\n    },\n    title: /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"table-title\",\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"20px\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 29\n      }\n    }, \"Company Details\")),\n    isLoading: loading // columns={List.columns}\n    ,\n    data: List,\n    columns: [{\n      title: 'Company Name',\n      field: 'CompanyName'\n    }, {\n      title: 'Owner Name',\n      field: 'OwnerName'\n    }, {\n      title: 'No OF Employee',\n      field: 'NoOFEmployee'\n    }, {\n      title: 'Registration No',\n      field: 'RegistrationNo'\n    }, {\n      title: 'GSTN No',\n      field: 'GSTN_No'\n    }, {\n      title: 'Status',\n      field: 'Status'\n    }],\n    localization: {\n      body: {\n        emptyDataSourceMessage: 'No records to display',\n        filterRow: {\n          filterTooltip: 'Filter'\n        }\n      }\n    },\n    options: {\n      actionsColumnIndex: -1,\n      pageSize: 10,\n      pageSizeOptions: [5, 10, 20, 30],\n      search: true,\n      headerStyle: {\n        fontWeight: 'bold',\n        paddingLeft: '10px',\n        paddingRight: '0px',\n        paddingTop: '5px',\n        paddingBottom: '5px',\n        textAlign: 'left'\n      }\n    },\n    actions: [{\n      icon: VisibilityOutlinedIcon,\n      tooltip: 'View',\n      onClick: function onClick(event, rowData) {\n        addView(rowData);\n      } // disabled:this.btnViewRights === true ? false : true\n\n    } // {\n    //     icon: 'delete',\n    //     tooltip: 'Delete',\n    //     onClick: (event, rowData) => {\n    //         onClickDelete(rowData)\n    //     },\n    //     // disabled: this.btnDeleteRights === true ? false : true\n    // },\n    ],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(DeleteBox, {\n    open: deleteBox,\n    msg: msgString,\n    onDelete: Delete,\n    onCancel: hide,\n    loadingDelete: loadingDelete,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    LoginRes: state.AuthReducer.LoginRes,\n    getAllCompanyList: state.AllActionReducer.getAllCompanyList,\n    getAllCompanyListNull: state.AllActionReducer.getAllCompanyListNull // users: state.AuthReducer.user,\n    // userActions: state.AuthReducer.userActions,\n    // ListRes: state.AllActionReducer.ListRes,\n    // ListDelRes: state.AllActionReducer.ListDelRes,\n    // ListInsertRes: state.AllActionReducer.ListInsertRes,\n    // ListUpdateRes: state.AllActionReducer.ListUpdateRes,\n    // error: state.AllActionReducer.error,\n    // sessionExpired: state.SessionExpiredReducer.sessionExpired\n\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    AllListsNull: function AllListsNull() {\n      return dispatch(AllAction.AllListsNull());\n    },\n    getAllCompany: function getAllCompany() {\n      return dispatch(AllAction.getAllCompany());\n    } // deleteAllLists: (payload) => dispatch(AllAction.deleteAllLists(payload)),\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashBoard);","map":{"version":3,"sources":["D:/Github/Admin_Panel/src/container/DashBoard/DashBoard.js"],"names":["React","useState","useEffect","useRef","connect","Growl","MaterialTable","VisibilityOutlinedIcon","Button","Checkbox","AllAction","DeleteBox","ErrorBox","DashBoard","props","deleteBox","setDeleteBox","loadingDelete","setloadingDelete","actionCol","setActionCol","errorBox","setErrorBox","msgString","setMsgString","selectedList","setSelectedList","List","setList","loading","setLoading","AddBtn","setAddBtn","Code","ID","SizeName","InActive","property","updatePropert","onClickDelete","rowData","Delete","ItemID","payload","FormName","hide","getAllCompany","SuperAdmin","JSON","parse","sessionStorage","getItem","window","location","error","AllListsNull","getAllCompanyList","console","log","getAllCompanyListNull","growl","addView","data","Company","Object","assign","newList","viewList","editList","history","push","pathname","hideError","el","marginTop","padding","fontWeight","fontSize","title","field","body","emptyDataSourceMessage","filterRow","filterTooltip","actionsColumnIndex","pageSize","pageSizeOptions","search","headerStyle","paddingLeft","paddingRight","paddingTop","paddingBottom","textAlign","icon","tooltip","onClick","event","mapStateToProps","state","LoginRes","AuthReducer","AllActionReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Growl } from 'primereact/growl';\r\nimport MaterialTable from 'material-table';\r\nimport VisibilityOutlinedIcon from '@material-ui/icons/VisibilityOutlined';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { AllAction } from '../../store/action/index';\r\nimport DeleteBox from '../../components/DeleteBox/DeleteBox';\r\nimport ErrorBox from '../../components/ErrorBox/ErrorBox';\r\n\r\nconst DashBoard = (props) => {\r\n\r\n    const [deleteBox, setDeleteBox] = useState(false);\r\n    const [loadingDelete, setloadingDelete] = useState(false);\r\n    const [actionCol, setActionCol] = useState([]);\r\n\r\n    const [errorBox, setErrorBox] = useState(false);\r\n    const [msgString, setMsgString] = useState('');\r\n    const [selectedList, setSelectedList] = useState(null);\r\n    const [List, setList] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [AddBtn, setAddBtn] = useState(false);\r\n    \r\n    const [property, updatePropert] = useState({\r\n        Code: '',\r\n        ID: '',\r\n        SizeName: '',\r\n        InActive: false\r\n    })\r\n\r\n\r\n    const onClickDelete = (rowData) => {\r\n        setDeleteBox(true);\r\n        setSelectedList(rowData)\r\n        setMsgString('Are you sure want to delete ?');\r\n\r\n    }\r\n    const Delete = () => {\r\n        setloadingDelete(true)\r\n        const ID = selectedList.ItemID;\r\n        let payload = {\r\n            FormName: 'Items',\r\n            ID: ID\r\n        }\r\n        // props.deleteAllLists(payload);\r\n    }\r\n    const hide = () => {\r\n        setSelectedList(null);\r\n        setDeleteBox(false);\r\n    }\r\n\r\n\r\n    // const latestProps = useRef(props);\r\n    useEffect(() => {\r\n        props.getAllCompany();\r\n        setLoading(true);\r\n        let SuperAdmin = JSON.parse(sessionStorage.getItem('SuperAdmin'));\r\n        if (SuperAdmin === null) {\r\n            window.location = \"#/access\";\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (props.error) {\r\n            setMsgString(props.error);\r\n            setLoading(false);\r\n            setloadingDelete(false)\r\n            setErrorBox(true);\r\n\r\n\r\n            props.AllListsNull()\r\n        }\r\n\r\n      \r\n        if (props.getAllCompanyList) {\r\n            props.AllListsNull()\r\n            setLoading(false);\r\n            console.log(\"getAllCompanyList\",props.getAllCompanyList)\r\n            setList(props.getAllCompanyList)\r\n           \r\n            };\r\n\r\n            if (props.getAllCompanyListNull) {\r\n                props.AllListsNull()\r\n                setLoading(false);\r\n                setErrorBox(true);\r\n                setMsgString(\"No Record Found, Please add company details\");\r\n                setAddBtn(true)\r\n                setList([])\r\n               \r\n                };\r\n            \r\n     \r\n    })\r\n    let growl;\r\n\r\n  \r\n\r\n    \r\n    const addView = (rowData) => {\r\n        let data = {\r\n            Company: Object.assign({}, rowData),\r\n            newList: false,\r\n            viewList: true,\r\n            editList: false\r\n        }\r\n\r\n        props.history.push({\r\n            pathname: \"DashBoardForm\",\r\n            data:data,\r\n        })\r\n      \r\n\r\n           \r\n    }\r\n    const hideError = () => {\r\n        setErrorBox(false);\r\n        setMsgString('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-grid p-fluid\" >\r\n            <div className=\"p-col-12 p-lg-12\">\r\n                <ErrorBox open={errorBox} onClose={hideError} msg={msgString} />\r\n                <Growl ref={(el) => growl = el} position=\"topright\" style={{ marginTop: '50px' }} />\r\n\r\n                <MaterialTable\r\n                    style={{\r\n                        padding: '10px'\r\n                    }}\r\n                    title=\r\n                    {\r\n                        <div className=\"table-button\" >\r\n                            <span className=\"table-title\" style={{ fontWeight: \"bold\", fontSize: \"20px\" }}>Company Details</span>\r\n                            \r\n                        </div>\r\n                    }\r\n                    isLoading={loading}\r\n                    // columns={List.columns}\r\n                    data={List}\r\n                    columns={[\r\n                        { title: 'Company Name', field: 'CompanyName' },\r\n                        { title: 'Owner Name', field: 'OwnerName' },\r\n                        { title: 'No OF Employee', field: 'NoOFEmployee' },\r\n                        { title: 'Registration No', field: 'RegistrationNo' },\r\n                        { title: 'GSTN No', field: 'GSTN_No' },\r\n                        { title: 'Status', field: 'Status' }, ]}\r\n                  \r\n                    localization={{\r\n                        body: {\r\n                            emptyDataSourceMessage: 'No records to display',\r\n                            filterRow: {\r\n                                filterTooltip: 'Filter'\r\n                            }\r\n                        }\r\n                    }}\r\n                    options={{\r\n                        actionsColumnIndex: -1,\r\n                        pageSize: 10,\r\n                        pageSizeOptions: [5, 10, 20, 30],\r\n                        search: true,\r\n                        headerStyle: {\r\n\r\n                            fontWeight: 'bold',\r\n                            paddingLeft: '10px',\r\n                            paddingRight: '0px',\r\n                            paddingTop: '5px',\r\n                            paddingBottom: '5px',\r\n                            textAlign: 'left'\r\n\r\n                        }\r\n                    }}\r\n                    actions={[\r\n                       \r\n                        {\r\n                            icon: VisibilityOutlinedIcon,\r\n                            tooltip: 'View',\r\n                            onClick: (event, rowData) => {\r\n                                addView(rowData);\r\n                            },\r\n                            // disabled:this.btnViewRights === true ? false : true\r\n                        },\r\n                        // {\r\n                        //     icon: 'delete',\r\n                        //     tooltip: 'Delete',\r\n                        //     onClick: (event, rowData) => {\r\n                        //         onClickDelete(rowData)\r\n                        //     },\r\n                        //     // disabled: this.btnDeleteRights === true ? false : true\r\n                        // },\r\n                    ]}\r\n                />\r\n                <DeleteBox open={deleteBox} msg={msgString} onDelete={Delete} onCancel={hide} loadingDelete={loadingDelete} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        LoginRes: state.AuthReducer.LoginRes,\r\n        getAllCompanyList:  state.AllActionReducer.getAllCompanyList,\r\n        getAllCompanyListNull:state.AllActionReducer.getAllCompanyListNull\r\n        // users: state.AuthReducer.user,\r\n        // userActions: state.AuthReducer.userActions,\r\n        // ListRes: state.AllActionReducer.ListRes,\r\n        // ListDelRes: state.AllActionReducer.ListDelRes,\r\n        // ListInsertRes: state.AllActionReducer.ListInsertRes,\r\n        // ListUpdateRes: state.AllActionReducer.ListUpdateRes,\r\n        // error: state.AllActionReducer.error,\r\n        // sessionExpired: state.SessionExpiredReducer.sessionExpired\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        AllListsNull: () => dispatch(AllAction.AllListsNull()),\r\n\r\n        getAllCompany: () => dispatch(AllAction.getAllCompany()),\r\n        // deleteAllLists: (payload) => dispatch(AllAction.deleteAllLists(payload)),\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DashBoard);"]},"metadata":{},"sourceType":"module"}