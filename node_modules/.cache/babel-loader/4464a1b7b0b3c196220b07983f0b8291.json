{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport CryptoJS from 'crypto-js';\nvar keySize = 256;\nvar iterations = 100;\n\nvar encryptDecrypt = function encryptDecrypt() {\n  _classCallCheck(this, encryptDecrypt);\n\n  this.decrypt = function (transitmessage, pass) {\n    var salt = CryptoJS.enc.Hex.parse(transitmessage.substr(0, 32));\n    var iv = CryptoJS.enc.Hex.parse(transitmessage.substr(32, 32));\n    var encrypted = transitmessage.substring(64);\n    var key = CryptoJS.PBKDF2(pass, salt, {\n      keySize: keySize / 32,\n      iterations: iterations\n    });\n    var decrypted = CryptoJS.AES.decrypt(encrypted, key, {\n      iv: iv,\n      padding: CryptoJS.pad.Pkcs7,\n      mode: CryptoJS.mode.CBC\n    });\n    return decrypted.toString(CryptoJS.enc.Utf8);\n  };\n\n  this.encrypt = function (msg, pass) {\n    var salt = CryptoJS.lib.WordArray.random(128 / 8);\n    var key = CryptoJS.PBKDF2(pass, salt, {\n      keySize: keySize / 32,\n      iterations: iterations\n    });\n    var iv = CryptoJS.lib.WordArray.random(128 / 8);\n    var encrypted = CryptoJS.AES.encrypt(msg, key, {\n      iv: iv,\n      padding: CryptoJS.pad.Pkcs7,\n      mode: CryptoJS.mode.CBC\n    });\n    var transitmessage = salt.toString() + iv.toString() + encrypted.toString();\n    return transitmessage;\n  };\n};\n\nexport default encryptDecrypt;","map":{"version":3,"sources":["D:/Github/Admin_Panel/src/utilities/encryptDecrypt.js"],"names":["CryptoJS","keySize","iterations","encryptDecrypt","decrypt","transitmessage","pass","salt","enc","Hex","parse","substr","iv","encrypted","substring","key","PBKDF2","decrypted","AES","padding","pad","Pkcs7","mode","CBC","toString","Utf8","encrypt","msg","lib","WordArray","random"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,WAArB;AAEA,IAAIC,OAAO,GAAG,GAAd;AACA,IAAIC,UAAU,GAAG,GAAjB;;IACMC,c;;;OAEFC,O,GAAU,UAACC,cAAD,EAAiBC,IAAjB,EAAyB;AAE/B,QAAIC,IAAI,GAAGP,QAAQ,CAACQ,GAAT,CAAaC,GAAb,CAAiBC,KAAjB,CAAuBL,cAAc,CAACM,MAAf,CAAsB,CAAtB,EAAyB,EAAzB,CAAvB,CAAX;AACA,QAAIC,EAAE,GAAGZ,QAAQ,CAACQ,GAAT,CAAaC,GAAb,CAAiBC,KAAjB,CAAuBL,cAAc,CAACM,MAAf,CAAsB,EAAtB,EAA0B,EAA1B,CAAvB,CAAT;AACA,QAAIE,SAAS,GAAGR,cAAc,CAACS,SAAf,CAAyB,EAAzB,CAAhB;AAEA,QAAIC,GAAG,GAAGf,QAAQ,CAACgB,MAAT,CAAgBV,IAAhB,EAAsBC,IAAtB,EAA4B;AACpCN,MAAAA,OAAO,EAAEA,OAAO,GAAG,EADiB;AAEpCC,MAAAA,UAAU,EAAEA;AAFwB,KAA5B,CAAV;AAKA,QAAIe,SAAS,GAAGjB,QAAQ,CAACkB,GAAT,CAAad,OAAb,CAAqBS,SAArB,EAAgCE,GAAhC,EAAqC;AACnDH,MAAAA,EAAE,EAAEA,EAD+C;AAEnDO,MAAAA,OAAO,EAAEnB,QAAQ,CAACoB,GAAT,CAAaC,KAF6B;AAGnDC,MAAAA,IAAI,EAAEtB,QAAQ,CAACsB,IAAT,CAAcC;AAH+B,KAArC,CAAhB;AAKA,WAAON,SAAS,CAACO,QAAV,CAAmBxB,QAAQ,CAACQ,GAAT,CAAaiB,IAAhC,CAAP;AACD,G;;OAEDC,O,GAAS,UAACC,GAAD,EAAMrB,IAAN,EAAc;AACrB,QAAIC,IAAI,GAAGP,QAAQ,CAAC4B,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8B,MAAI,CAAlC,CAAX;AACA,QAAIf,GAAG,GAAGf,QAAQ,CAACgB,MAAT,CAAgBV,IAAhB,EAAsBC,IAAtB,EAA4B;AAClCN,MAAAA,OAAO,EAAEA,OAAO,GAAC,EADiB;AAElCC,MAAAA,UAAU,EAAEA;AAFsB,KAA5B,CAAV;AAIA,QAAIU,EAAE,GAAGZ,QAAQ,CAAC4B,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8B,MAAI,CAAlC,CAAT;AACA,QAAIjB,SAAS,GAAGb,QAAQ,CAACkB,GAAT,CAAaQ,OAAb,CAAqBC,GAArB,EAA0BZ,GAA1B,EAA+B;AAC7CH,MAAAA,EAAE,EAAEA,EADyC;AAE7CO,MAAAA,OAAO,EAAEnB,QAAQ,CAACoB,GAAT,CAAaC,KAFuB;AAG7CC,MAAAA,IAAI,EAAEtB,QAAQ,CAACsB,IAAT,CAAcC;AAHyB,KAA/B,CAAhB;AAKA,QAAIlB,cAAc,GAAGE,IAAI,CAACiB,QAAL,KAAiBZ,EAAE,CAACY,QAAH,EAAjB,GAAiCX,SAAS,CAACW,QAAV,EAAtD;AACA,WAAOnB,cAAP;AACD,G;;;AAQL,eAAgBF,cAAhB","sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\nlet keySize = 256;\r\nlet iterations = 100;\r\nclass encryptDecrypt {\r\n     \r\n    decrypt = (transitmessage, pass)=> {\r\n     \r\n        var salt = CryptoJS.enc.Hex.parse(transitmessage.substr(0, 32));\r\n        var iv = CryptoJS.enc.Hex.parse(transitmessage.substr(32, 32));\r\n        var encrypted = transitmessage.substring(64);\r\n      \r\n        var key = CryptoJS.PBKDF2(pass, salt, {\r\n          keySize: keySize / 32,\r\n          iterations: iterations\r\n        });\r\n      \r\n        var decrypted = CryptoJS.AES.decrypt(encrypted, key, {\r\n          iv: iv,\r\n          padding: CryptoJS.pad.Pkcs7,\r\n          mode: CryptoJS.mode.CBC\r\n        });\r\n        return decrypted.toString(CryptoJS.enc.Utf8);\r\n      }\r\n\r\n      encrypt= (msg, pass)=> {\r\n        var salt = CryptoJS.lib.WordArray.random(128/8);\r\n        var key = CryptoJS.PBKDF2(pass, salt, {\r\n            keySize: keySize/32,\r\n            iterations: iterations\r\n          });\r\n        var iv = CryptoJS.lib.WordArray.random(128/8);\r\n        var encrypted = CryptoJS.AES.encrypt(msg, key, { \r\n          iv: iv, \r\n          padding: CryptoJS.pad.Pkcs7,\r\n          mode: CryptoJS.mode.CBC\r\n        });\r\n        var transitmessage = salt.toString()+ iv.toString() + encrypted.toString();\r\n        return transitmessage;\r\n      }\r\n\r\n      \r\n    \r\n  \r\n\r\n  }\r\n  \r\n  export default (encryptDecrypt);"]},"metadata":{},"sourceType":"module"}