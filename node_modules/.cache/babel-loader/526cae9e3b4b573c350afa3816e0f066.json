{"ast":null,"code":"import _classCallCheck from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\Github\\\\Admin_Panel\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"D:\\\\Github\\\\Admin_Panel\\\\src\\\\container\\\\Inbox\\\\Inbox.js\";\nimport React, { Component } from \"react\"; // import ReactDOM from \"react-dom\";\n// import { GiftedChat } from \"react-web-gifted-chat\";\n// import Button from \"@material-ui/core/Button\";\n// import Avatar from \"@material-ui/core/Avatar\";\n// import List from \"@material-ui/core/List\";\n// import ListItem from \"@material-ui/core/ListItem\";\n// import ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\n// import ListItemText from \"@material-ui/core/ListItemText\";\n// import DialogTitle from \"@material-ui/core/DialogTitle\";\n// import Dialog from \"@material-ui/core/Dialog\";\n// import Typography from \"@material-ui/core/Typography\";\n// import AppBar from \"@material-ui/core/AppBar\";\n// import Toolbar from \"@material-ui/core/Toolbar\";\n// import appFirebase from '../../utilities/Firebase';\n\nvar Inbox = /*#__PURE__*/function (_Component) {\n  _inherits(Inbox, _Component);\n\n  var _super = _createSuper(Inbox);\n\n  function Inbox() {\n    var _this;\n\n    _classCallCheck(this, Inbox);\n\n    _this = _super.call(this);\n    _this.state = {\n      messages: [],\n      user: {},\n      isAuthenticated: false\n    };\n    return _this;\n  } //   componentDidMount() {\n  //   }\n  //   //   loadMessages() {\n  //   //     const callback = snap => {\n  //   //       const message = snap.val();\n  //   //       message.id = snap.key;\n  //   //       const { messages } = this.state;\n  //   //       messages.push(message);\n  //   //       this.setState({ messages });\n  //   //     };\n  //   //     firebase\n  //   //       .database()\n  //   //       .ref(\"/messages/\")\n  //   //       .limitToLast(12)\n  //   //       .on(\"child_added\", callback);\n  //   //   }\n  //   renderPopup() {\n  //     return (\n  //       <Dialog open={!this.state.isAuthenticated}>\n  //         <DialogTitle id=\"simple-dialog-title\">Sign in</DialogTitle>\n  //         <div>\n  //           <List>\n  //             <ListItem button onClick={() => this.signIn()}>\n  //               <ListItemAvatar>\n  //                 <Avatar style={{ backgroundColor: \"#eee\" }}>\n  //                   <img\n  //                     src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\"\n  //                     height=\"30\"\n  //                     alt=\"G\"\n  //                   />\n  //                 </Avatar>\n  //               </ListItemAvatar>\n  //               <ListItemText primary=\"Sign in with Google\" />\n  //             </ListItem>\n  //           </List>\n  //         </div>\n  //       </Dialog>\n  //     );\n  //   }\n  //   onSend(messages) {\n  //     for (const message of messages) {\n  //       this.saveMessage(message);\n  //     }\n  //   }\n  //   fun = () => {\n  //     const { otherUserId } = this.props.navigation.state.params\n  //     const { userId } = this.props.userObj\n  //     const { messageList } = this.state\n  //     const appFirebase = firebaseLib.firestore()\n  //     userObj = {\n  //       [userId]: true,\n  //       [otherUserId]: true,\n  //       createdAt: Date.now()\n  //     }\n  //     appFirebase.collection(\"Rooms\")\n  //       .where(\"userObj.\" + userId, '==', true)\n  //       .where(\"userObj.\" + otherUserId, '==', true)\n  //       .onSnapshot(snapShot => {\n  //         console.log({ snapShot })\n  //         if (snapShot.empty) {\n  //           appFirebase.collection('Rooms').add({ userObj }).then((doc) => {\n  //             const roomId = doc.id\n  //             this.setState({ roomId })\n  //             return\n  //           })\n  //         }\n  //         snapShot.docChanges.forEach((value) => {\n  //           this.setState({ roomId: value.doc.id })\n  //           appFirebase.collection('Rooms').doc(value.doc.id)\n  //             .collection('Messages')\n  //             .orderBy('createdAt')\n  //             .onSnapshot(querySnapShot => {\n  //               if (querySnapShot.empty) console.log(\"nothing\"); return\n  //               querySnapShot.docChanges.forEach((values) => {\n  //                 messageList.push(values.doc.data())\n  //               })\n  //               console.log({ messageList })\n  //               this.setState({ messageList })\n  //             })\n  //         })\n  //       })\n  //   }\n  //   sendMessage = async () => {\n  //     const { otherUserId } = this.props.navigation.state.params\n  //     const { userId, userName } = this.props.userObj\n  //     const { roomId, message } = this.state\n  //     const appFirebase = firebaseLib.firestore()\n  //     if (!message) return alert('Write a message')\n  //     const msgObj = {\n  //       message: message,\n  //       senderId: userId,\n  //       recieverId: otherUserId,\n  //       createdAt: Date.now(),\n  //       senderName: userName\n  //     }\n  //     await appFirebase.collection('Rooms').doc(roomId).collection('Messages').add(msgObj)\n  //     this.setState({ message: '' })\n  //   }\n  //   saveMessage(message) {\n  //     return appFirebase\n  //       .collection(\"\")\n  //       .ref(\"/messages/\")\n  //       .push(message)\n  //       .catch(function (error) {\n  //         console.error(\"Error saving message to Database:\", error);\n  //       });\n  //   }\n  //   renderSignOutButton() {\n  //     if (this.state.isAuthenticated) {\n  //       return <Button onClick={() => this.signOut()}>Sign out</Button>;\n  //     }\n  //     return null;\n  //   }\n  //   renderChat() {\n  //     return (\n  //       <GiftedChat\n  //         user={this.chatUser}\n  //         messages={this.state.messages.slice().reverse()}\n  //         onSend={messages => this.onSend(messages)}\n  //       />\n  //     );\n  //   }\n  //   renderChannels() {\n  //     return (\n  //       <List>\n  //         <ListItem button>\n  //           <ListItemAvatar>\n  //             <Avatar>D</Avatar>\n  //           </ListItemAvatar>\n  //           <ListItemText primary=\"Default\" />\n  //         </ListItem>\n  //         <ListItem button>\n  //           <ListItemAvatar>\n  //             <Avatar>D</Avatar>\n  //           </ListItemAvatar>\n  //           <ListItemText primary=\"Default\" />\n  //         </ListItem>\n  //       </List>\n  //     );\n  //   }\n  //   renderChannelsHeader() {\n  //     return (\n  //       <AppBar position=\"static\" color=\"default\">\n  //         <Toolbar>\n  //           <Typography variant=\"h6\" color=\"inherit\">\n  //             Users\n  //           </Typography>\n  //         </Toolbar>\n  //       </AppBar>\n  //     );\n  //   }\n  //   renderChatHeader() {\n  //     return (\n  //       <AppBar position=\"static\" color=\"default\">\n  //         <Toolbar>\n  //           <Typography variant=\"h6\" color=\"inherit\">\n  //             Default channel\n  //           </Typography>\n  //         </Toolbar>\n  //       </AppBar>\n  //     );\n  //   }\n  //   renderSettingsHeader() {\n  //     return (\n  //       <AppBar position=\"static\" color=\"default\">\n  //         <Toolbar>\n  //           <Typography variant=\"h6\" color=\"inherit\">\n  //             Settings\n  //           </Typography>\n  //         </Toolbar>\n  //       </AppBar>\n  //     );\n  //   }\n\n\n  _createClass(Inbox, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return Inbox;\n}(Component);\n\nvar styles = {\n  container: {\n    flex: 1,\n    display: \"flex\",\n    flexDirection: \"row\",\n    height: \"80vh\",\n    backgroundColor: 'white'\n  },\n  channelList: {\n    display: \"flex\",\n    flex: 1,\n    flexDirection: \"column\"\n  },\n  chat: {\n    display: \"flex\",\n    flex: 3,\n    flexDirection: \"column\",\n    borderWidth: \"1px\",\n    borderColor: \"#ccc\",\n    borderRightStyle: \"solid\",\n    borderLeftStyle: \"solid\"\n  },\n  settings: {\n    display: \"flex\",\n    flex: 1,\n    flexDirection: \"column\"\n  }\n};\nexport default Inbox;","map":{"version":3,"sources":["D:/Github/Admin_Panel/src/container/Inbox/Inbox.js"],"names":["React","Component","Inbox","state","messages","user","isAuthenticated","styles","container","flex","display","flexDirection","height","backgroundColor","channelList","chat","borderWidth","borderColor","borderRightStyle","borderLeftStyle","settings"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAIMC,K;;;;;AACJ,mBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,IAAI,EAAE,EAFK;AAGXC,MAAAA,eAAe,EAAE;AAHN,KAAb;AAFY;AAOb,G,CAKH;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;6BAEW;AACP,0BACE;AAAK,QAAA,KAAK,EAAEC,MAAM,CAACC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAkBD;;;;EAlOiBP,S;;AAsOpB,IAAMM,MAAM,GAAG;AACZC,EAAAA,SAAS,EAAE;AACVC,IAAAA,IAAI,EAAE,CADI;AAEVC,IAAAA,OAAO,EAAE,MAFC;AAGVC,IAAAA,aAAa,EAAE,KAHL;AAIVC,IAAAA,MAAM,EAAE,MAJE;AAKVC,IAAAA,eAAe,EAAE;AALP,GADC;AAQbC,EAAAA,WAAW,EAAE;AACXJ,IAAAA,OAAO,EAAE,MADE;AAEXD,IAAAA,IAAI,EAAE,CAFK;AAGXE,IAAAA,aAAa,EAAE;AAHJ,GARA;AAabI,EAAAA,IAAI,EAAE;AACJL,IAAAA,OAAO,EAAE,MADL;AAEJD,IAAAA,IAAI,EAAE,CAFF;AAGJE,IAAAA,aAAa,EAAE,QAHX;AAIJK,IAAAA,WAAW,EAAE,KAJT;AAKJC,IAAAA,WAAW,EAAE,MALT;AAMJC,IAAAA,gBAAgB,EAAE,OANd;AAOJC,IAAAA,eAAe,EAAE;AAPb,GAbO;AAsBbC,EAAAA,QAAQ,EAAE;AACRV,IAAAA,OAAO,EAAE,MADD;AAERD,IAAAA,IAAI,EAAE,CAFE;AAGRE,IAAAA,aAAa,EAAE;AAHP;AAtBG,CAAf;AA6BA,eAAeT,KAAf","sourcesContent":["import React, { Component } from \"react\";\r\n// import ReactDOM from \"react-dom\";\r\n// import { GiftedChat } from \"react-web-gifted-chat\";\r\n\r\n// import Button from \"@material-ui/core/Button\";\r\n// import Avatar from \"@material-ui/core/Avatar\";\r\n// import List from \"@material-ui/core/List\";\r\n// import ListItem from \"@material-ui/core/ListItem\";\r\n// import ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\n// import ListItemText from \"@material-ui/core/ListItemText\";\r\n// import DialogTitle from \"@material-ui/core/DialogTitle\";\r\n// import Dialog from \"@material-ui/core/Dialog\";\r\n// import Typography from \"@material-ui/core/Typography\";\r\n// import AppBar from \"@material-ui/core/AppBar\";\r\n// import Toolbar from \"@material-ui/core/Toolbar\";\r\n// import appFirebase from '../../utilities/Firebase';\r\n\r\n\r\n\r\nclass Inbox extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      messages: [],\r\n      user: {},\r\n      isAuthenticated: false,\r\n    };\r\n  }\r\n\r\n\r\n\r\n\r\n//   componentDidMount() {\r\n\r\n//   }\r\n\r\n//   //   loadMessages() {\r\n//   //     const callback = snap => {\r\n//   //       const message = snap.val();\r\n//   //       message.id = snap.key;\r\n//   //       const { messages } = this.state;\r\n//   //       messages.push(message);\r\n//   //       this.setState({ messages });\r\n//   //     };\r\n//   //     firebase\r\n//   //       .database()\r\n//   //       .ref(\"/messages/\")\r\n//   //       .limitToLast(12)\r\n//   //       .on(\"child_added\", callback);\r\n//   //   }\r\n\r\n//   renderPopup() {\r\n//     return (\r\n//       <Dialog open={!this.state.isAuthenticated}>\r\n//         <DialogTitle id=\"simple-dialog-title\">Sign in</DialogTitle>\r\n//         <div>\r\n//           <List>\r\n//             <ListItem button onClick={() => this.signIn()}>\r\n//               <ListItemAvatar>\r\n//                 <Avatar style={{ backgroundColor: \"#eee\" }}>\r\n//                   <img\r\n//                     src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\"\r\n//                     height=\"30\"\r\n//                     alt=\"G\"\r\n//                   />\r\n//                 </Avatar>\r\n//               </ListItemAvatar>\r\n//               <ListItemText primary=\"Sign in with Google\" />\r\n//             </ListItem>\r\n//           </List>\r\n//         </div>\r\n//       </Dialog>\r\n//     );\r\n//   }\r\n\r\n//   onSend(messages) {\r\n//     for (const message of messages) {\r\n//       this.saveMessage(message);\r\n//     }\r\n//   }\r\n\r\n//   fun = () => {\r\n//     const { otherUserId } = this.props.navigation.state.params\r\n//     const { userId } = this.props.userObj\r\n//     const { messageList } = this.state\r\n//     const appFirebase = firebaseLib.firestore()\r\n//     userObj = {\r\n//       [userId]: true,\r\n//       [otherUserId]: true,\r\n//       createdAt: Date.now()\r\n//     }\r\n\r\n//     appFirebase.collection(\"Rooms\")\r\n//       .where(\"userObj.\" + userId, '==', true)\r\n//       .where(\"userObj.\" + otherUserId, '==', true)\r\n//       .onSnapshot(snapShot => {\r\n//         console.log({ snapShot })\r\n//         if (snapShot.empty) {\r\n//           appFirebase.collection('Rooms').add({ userObj }).then((doc) => {\r\n//             const roomId = doc.id\r\n//             this.setState({ roomId })\r\n//             return\r\n//           })\r\n//         }\r\n//         snapShot.docChanges.forEach((value) => {\r\n//           this.setState({ roomId: value.doc.id })\r\n//           appFirebase.collection('Rooms').doc(value.doc.id)\r\n//             .collection('Messages')\r\n//             .orderBy('createdAt')\r\n//             .onSnapshot(querySnapShot => {\r\n//               if (querySnapShot.empty) console.log(\"nothing\"); return\r\n//               querySnapShot.docChanges.forEach((values) => {\r\n//                 messageList.push(values.doc.data())\r\n//               })\r\n//               console.log({ messageList })\r\n//               this.setState({ messageList })\r\n//             })\r\n\r\n//         })\r\n\r\n//       })\r\n//   }\r\n\r\n\r\n\r\n//   sendMessage = async () => {\r\n//     const { otherUserId } = this.props.navigation.state.params\r\n//     const { userId, userName } = this.props.userObj\r\n//     const { roomId, message } = this.state\r\n//     const appFirebase = firebaseLib.firestore()\r\n//     if (!message) return alert('Write a message')\r\n//     const msgObj = {\r\n//       message: message,\r\n//       senderId: userId,\r\n//       recieverId: otherUserId,\r\n//       createdAt: Date.now(),\r\n//       senderName: userName\r\n//     }\r\n//     await appFirebase.collection('Rooms').doc(roomId).collection('Messages').add(msgObj)\r\n//     this.setState({ message: '' })\r\n//   }\r\n\r\n\r\n//   saveMessage(message) {\r\n//     return appFirebase\r\n//       .collection(\"\")\r\n//       .ref(\"/messages/\")\r\n//       .push(message)\r\n//       .catch(function (error) {\r\n//         console.error(\"Error saving message to Database:\", error);\r\n//       });\r\n//   }\r\n\r\n//   renderSignOutButton() {\r\n//     if (this.state.isAuthenticated) {\r\n//       return <Button onClick={() => this.signOut()}>Sign out</Button>;\r\n//     }\r\n//     return null;\r\n//   }\r\n\r\n//   renderChat() {\r\n//     return (\r\n//       <GiftedChat\r\n//         user={this.chatUser}\r\n//         messages={this.state.messages.slice().reverse()}\r\n//         onSend={messages => this.onSend(messages)}\r\n//       />\r\n//     );\r\n//   }\r\n\r\n//   renderChannels() {\r\n//     return (\r\n//       <List>\r\n//         <ListItem button>\r\n//           <ListItemAvatar>\r\n//             <Avatar>D</Avatar>\r\n//           </ListItemAvatar>\r\n//           <ListItemText primary=\"Default\" />\r\n//         </ListItem>\r\n\r\n\r\n//         <ListItem button>\r\n//           <ListItemAvatar>\r\n//             <Avatar>D</Avatar>\r\n//           </ListItemAvatar>\r\n//           <ListItemText primary=\"Default\" />\r\n//         </ListItem>\r\n//       </List>\r\n//     );\r\n//   }\r\n\r\n//   renderChannelsHeader() {\r\n//     return (\r\n//       <AppBar position=\"static\" color=\"default\">\r\n//         <Toolbar>\r\n//           <Typography variant=\"h6\" color=\"inherit\">\r\n//             Users\r\n//           </Typography>\r\n//         </Toolbar>\r\n//       </AppBar>\r\n//     );\r\n//   }\r\n//   renderChatHeader() {\r\n//     return (\r\n//       <AppBar position=\"static\" color=\"default\">\r\n//         <Toolbar>\r\n//           <Typography variant=\"h6\" color=\"inherit\">\r\n//             Default channel\r\n//           </Typography>\r\n\r\n//         </Toolbar>\r\n//       </AppBar>\r\n//     );\r\n//   }\r\n//   renderSettingsHeader() {\r\n//     return (\r\n//       <AppBar position=\"static\" color=\"default\">\r\n//         <Toolbar>\r\n//           <Typography variant=\"h6\" color=\"inherit\">\r\n//             Settings\r\n//           </Typography>\r\n//         </Toolbar>\r\n//       </AppBar>\r\n//     );\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n\r\n        {/* {this.renderPopup()} */}\r\n        {/* <div style={styles.channelList}>\r\n          {this.renderChannelsHeader()}\r\n          {this.renderChannels()}\r\n        </div> */}\r\n        {/* <div style={styles.chat}>\r\n          {this.renderChatHeader()}\r\n          {this.renderChat()}\r\n        </div> */}\r\n        {/* <div style={styles.settings}>\r\n          {this.renderSettingsHeader()}\r\n          {this.renderSignOutButton()}\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n }\r\n\r\n\r\nconst styles = {\r\n   container: {\r\n    flex: 1,\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    height: \"80vh\",\r\n    backgroundColor: 'white'\r\n  },\r\n  channelList: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n  },\r\n  chat: {\r\n    display: \"flex\",\r\n    flex: 3,\r\n    flexDirection: \"column\",\r\n    borderWidth: \"1px\",\r\n    borderColor: \"#ccc\",\r\n    borderRightStyle: \"solid\",\r\n    borderLeftStyle: \"solid\",\r\n  },\r\n  settings: {\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n  },\r\n};\r\n\r\nexport default Inbox"]},"metadata":{},"sourceType":"module"}