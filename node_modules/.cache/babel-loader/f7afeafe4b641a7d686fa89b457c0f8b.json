{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport { merge } from 'rxjs/observable/merge';\n/**\n  Merges all epics into a single one.\n */\n\nexport var combineEpics = function combineEpics() {\n  for (var _len = arguments.length, epics = Array(_len), _key = 0; _key < _len; _key++) {\n    epics[_key] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return merge.apply(undefined, _toConsumableArray(epics.map(function (epic) {\n      var output$ = epic.apply(undefined, args);\n\n      if (!output$) {\n        throw new TypeError('combineEpics: one of the provided Epics \"' + (epic.name || '<anonymous>') + '\" does not return a stream. Double check you\\'re not missing a return statement!');\n      }\n\n      return output$;\n    })));\n  };\n};","map":{"version":3,"sources":["D:/Github/Admin_Panel/node_modules/redux-observable/lib/esm/combineEpics.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","merge","combineEpics","_len","arguments","epics","_key","_len2","args","_key2","apply","undefined","map","epic","output$","TypeError","name"],"mappings":"AAAA,SAASA,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AAAE,SAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGH,KAAK,CAACD,GAAG,CAACK,MAAL,CAA5B,EAA0CF,CAAC,GAAGH,GAAG,CAACK,MAAlD,EAA0DF,CAAC,EAA3D,EAA+D;AAAEC,MAAAA,IAAI,CAACD,CAAD,CAAJ,GAAUH,GAAG,CAACG,CAAD,CAAb;AAAmB;;AAAC,WAAOC,IAAP;AAAc,GAA7H,MAAmI;AAAE,WAAOH,KAAK,CAACK,IAAN,CAAWN,GAAX,CAAP;AAAyB;AAAE;;AAEnM,SAASO,KAAT,QAAsB,uBAAtB;AAEA;;;;AAGA,OAAO,IAAIC,YAAY,GAAG,SAASA,YAAT,GAAwB;AAChD,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACL,MAArB,EAA6BM,KAAK,GAAGV,KAAK,CAACQ,IAAD,CAA1C,EAAkDG,IAAI,GAAG,CAA9D,EAAiEA,IAAI,GAAGH,IAAxE,EAA8EG,IAAI,EAAlF,EAAsF;AACpFD,IAAAA,KAAK,CAACC,IAAD,CAAL,GAAcF,SAAS,CAACE,IAAD,CAAvB;AACD;;AAED,SAAO,YAAY;AACjB,SAAK,IAAIC,KAAK,GAAGH,SAAS,CAACL,MAAtB,EAA8BS,IAAI,GAAGb,KAAK,CAACY,KAAD,CAA1C,EAAmDE,KAAK,GAAG,CAAhE,EAAmEA,KAAK,GAAGF,KAA3E,EAAkFE,KAAK,EAAvF,EAA2F;AACzFD,MAAAA,IAAI,CAACC,KAAD,CAAJ,GAAcL,SAAS,CAACK,KAAD,CAAvB;AACD;;AAED,WAAOR,KAAK,CAACS,KAAN,CAAYC,SAAZ,EAAuBlB,kBAAkB,CAACY,KAAK,CAACO,GAAN,CAAU,UAAUC,IAAV,EAAgB;AACzE,UAAIC,OAAO,GAAGD,IAAI,CAACH,KAAL,CAAWC,SAAX,EAAsBH,IAAtB,CAAd;;AACA,UAAI,CAACM,OAAL,EAAc;AACZ,cAAM,IAAIC,SAAJ,CAAc,+CAA+CF,IAAI,CAACG,IAAL,IAAa,aAA5D,IAA6E,kFAA3F,CAAN;AACD;;AACD,aAAOF,OAAP;AACD,KANgD,CAAD,CAAzC,CAAP;AAOD,GAZD;AAaD,CAlBM","sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport { merge } from 'rxjs/observable/merge';\n\n/**\n  Merges all epics into a single one.\n */\nexport var combineEpics = function combineEpics() {\n  for (var _len = arguments.length, epics = Array(_len), _key = 0; _key < _len; _key++) {\n    epics[_key] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return merge.apply(undefined, _toConsumableArray(epics.map(function (epic) {\n      var output$ = epic.apply(undefined, args);\n      if (!output$) {\n        throw new TypeError('combineEpics: one of the provided Epics \"' + (epic.name || '<anonymous>') + '\" does not return a stream. Double check you\\'re not missing a return statement!');\n      }\n      return output$;\n    })));\n  };\n};"]},"metadata":{},"sourceType":"module"}